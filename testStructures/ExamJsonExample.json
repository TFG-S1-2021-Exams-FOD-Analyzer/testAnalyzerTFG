{
  "_Id": 201,
  "Students": [],
  "Items": [
    {
      "idItem": 39,
      "Conditions": [
        {
          "idCondicion": 3,
          "Nombre": "While",
          "Peso": 3,
          "Cantidad": 3
        }
      ],
      "Solutions": [
        {
          "Respuesta": "para primosGemelos(pInicio, pFin)\n    si (pInicio < pFin) entonces\n        contador := pInicio\n        mientras(contador < pFin) haga\n            primo := esPrimo(contador)\n            si (primo) entonces\n                primoGemelo := esPrimo(contador + 2)\n                si (primoGemelo) entonces\n                    imprimir(contador + \" y \" + (contador + 2))\n                fin\n            fin\n            contador := contador + 1\n        fin\n    sino\n        imprimir(\"ERROR: EL INICIO DEL RANGO DEBE SER < AL FIN DEL RANGO\")\n    fin\nfin\n\npara principal()\n    primosGemelos(2, 43)\nfin",
          "Peso_clon1": 111,
          "Peso_clon2": 112,
          "Peso_clon3": 113
        },
        {
          "Respuesta": "para principal ()\n    i := 0\n    mientras(i <= 3) haga\n        imprimir(\"iteracion: \" + i)\n        anidado := 0\n        mientras (anidado <= 2) haga\n            imprimir(\"anidado: \" + anidado)\n            anidado := anidado + 1\n        fin\n        i := i + 1\n    fin\nfin",
          "Peso_clon1": 121,
          "Peso_clon2": 122,
          "Peso_clon3": 123
        },
        {
          "Respuesta": "para dobleFactorial(pNumero)\n    factorial := 1\n    si (pNumero = 0) entonces\n        devolver factorial\n    fin\n    si ((pNumero mod 2) diferente 1) entonces // Es par\n        contador := 2\n        mientras (contador <= pNumero) haga\n            factorial := factorial * contador\n            contador := contador + 2\n        fin\n    fin\n    si ((pNumero mod 2) igual 1) entonces // Es impar\n        contador := 1\n        mientras (contador <= pNumero) haga\n            factorial := factorial * contador\n            contador := contador + 2\n        fin\n    fin\n    devolver factorial\nfin\n\npara dobleFactorial1(pNumero)\n    factorial := 1\n    si ((pNumero mod 2) igual 1) entonces // Es impar\n        contador := 1\n        mientras (contador <= pNumero) haga\n            factorial := factorial * contador\n            contador := contador + 2\n        fin\n    fin\n    devolver factorial\nfin\n\npara principal()\n    imprimir(dobleFactorial(9))\n    imprimir(dobleFactorial(8))\n    imprimir(dobleFactorial(0))\nfin",
          "Peso_clon1": 131,
          "Peso_clon2": 132,
          "Peso_clon3": 133
        }
      ],
      "ExeAnswers": []
    },
    {
      "idItem": 42,
      "Conditions": [
        {
          "idCondicion": 1,
          "Nombre": "For",
          "Peso": 8,
          "Cantidad": 3
        }
      ],
      "Solutions": [
        {
          "Respuesta": "para fibonacci(pNumero)\n    si (pNumero > 0) entonces\n        arreglo := [pNumero]\n        arreglo[0] := 0\n        si (pNumero = 1) entonces\n            devolver arreglo\n        fin\n        arreglo[1] := 1\n        si (pNumero = 2) entonces\n            devolver arreglo\n        fin\n        contador := 2\n        repetir (pNumero - 2) veces\n            arreglo[contador] := arreglo[contador - 2] + arreglo[contador - 1]\n            contador := contador + 1\n        fin\n        devolver arreglo\n    sino\n        devolver \"Error: Debe ingresar un valor mayor que 0\"\n    fin\nfin\n\npara principal()\n    imprimir(fibonacci(5))\n    imprimir(fibonacci(8))\n    imprimir(fibonacci(1))\nfin",
          "Peso_clon1": 211,
          "Peso_clon2": 212,
          "Peso_clon3": 213
        },
        {
          "Respuesta": "para principal ()\n    num := 0\n    repetir (3) veces\n        imprimir(\"valor de num: \" + num)\n        num := num + 1\n    fin\n\n    repetir (3) veces\n        imprimir(\"valor de num: \" + num)\n        num := num + 1\n    fin\n    \n    //Ciclo anidado\n    iteracion := 0\n    repetir (num + 1) veces\n        imprimir(\"iteracion: \" + iteracion)\n        anidado := 0\n        iteracion := iteracion + 1\n    fin\n    \nfin",
          "Peso_clon1": 221,
          "Peso_clon2": 222,
          "Peso_clon3": 223
        },
        {
          "Respuesta": "para principal ()\n    num := 0\n    repetir (3) veces\n        imprimir(\"valor de num: \" + num)\n        num := num + 1\n    fin\n\n    repetir (3) veces\n        imprimir(\"valor de num: \" + num)\n        num := num + 1\n    fin\n    \n    //Ciclo anidado\n    iteracion := 0\n    repetir (num + 1) veces\n        imprimir(\"iteracion: \" + iteracion)\n        anidado := 0\n        repetir (2) veces\n            imprimir(\"iteracion anidada: \" + anidado)\n            anidado := anidado + 1\n        fin\n        iteracion := iteracion + 1\n    fin\n    \nfin",
          "Peso_clon1": 231,
          "Peso_clon2": 232,
          "Peso_clon3": 233
        }
      ],
      "ExeAnswers": []
    },
    {
      "idItem": 43,
      "Conditions": [
        {
          "idCondicion": 1,
          "Nombre": "if",
          "Peso": 2,
          "Cantidad": 2
        }
      ],
      "Solutions": [
        {
          "Respuesta": "para sumatoria(pInicio, pFin)\n    contador := pFin\n    respuesta := 0\n    si (pFin < pInicio) entonces\n        devolver \"ERROR: EL INICIO DEL RANGO DEBE SER <= AL FIN DEL RANGO\"\n    fin\n    si ((pInicio * 2 mod 2) = 1 o (pFin * 2 mod 2) = 1) entonces\n        devolver \"ERROR: LAS ENTRADAS DEBEN SER NUMEROS ENTEROS\"\n    sino\n        mientras(contador >= pInicio) haga\n            respuesta := respuesta + contador\n            contador := contador -1\n        fin\n        devolver respuesta\n    fin\nfin\n\npara principal()\n    respuestaSum := sumatoria(10, 155)\n    imprimir(respuestaSum)\n    respuestaSum := sumatoria(8.5, 15)\n    imprimir(respuestaSum)\n    respuestaSum := sumatoria(250, 8)\n    imprimir(respuestaSum)\nfin",
          "Peso_clon1": 311,
          "Peso_clon2": 312,
          "Peso_clon3": 313
        },
        {
          "Respuesta": "para principal ()\n    bandera := verdadero\n    si (bandera = verdadero) entonces\n        imprimir(\"bandera: \" + verdadero)\n    sino\n        imprimir(\"bandera: \" + falso)\n    fin\n\n    bandera := falso\n    si (bandera = verdadero) entonces\n        imprimir(\"bandera: \" + bandera)\n    sino\n        imprimir(\"bandera: \" + bandera)\n    fin\n\n    num := 5\n    si (num < 5) entonces\n        imprimir(\"num es menor que 5\")\n    sino si (num > 5) entonces\n        imprimir(\"num es mayor que 5\")\n    sino\n        imprimir(\"num es igual a 5\")\n    fin\nfin",
          "Peso_clon1": 321,
          "Peso_clon2": 322,
          "Peso_clon3": 323
        }
      ],
      "ExeAnswers": []
    }
  ]
}
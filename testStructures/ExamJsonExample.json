{
  "_Id": 201,
  "Students": [],
  "Items": [
    {
      "idItem": 39,
      "Conditions": [
        {
          "idCondicion": 3,
          "Nombre": "While",
          "Peso": 3,
          "Cantidad": 3
        }
      ],
      "Solutions": [
        {
          "Respuesta": "para primosGemelos(pInicio, pFin)\n    si (pInicio < pFin) entonces\n        contador := pInicio\n        mientras(contador < pFin) haga\n            primo := esPrimo(contador)\n            si (primo) entonces\n                primoGemelo := esPrimo(contador + 2)\n                si (primoGemelo) entonces\n                    imprimir(contador + \" y \" + (contador + 2))\n                fin\n            fin\n            contador := contador + 1\n        fin\n    sino\n        imprimir(\"ERROR: EL INICIO DEL RANGO DEBE SER < AL FIN DEL RANGO\")\n    fin\nfin\n\npara principal()\n    primosGemelos(2, 43)\nfin",
          "Peso_clon1": 8,
          "Peso_clon2": 8,
          "Peso_clon3": 8
        },
        {
          "Respuesta": "para principal ()\n    i := 0\n    mientras(i <= 3) haga\n        imprimir(\"solamente se ejecuta una vez\")\n        finciclo\n    fin\n\n    i := 0\n    mientras(i <= 3) haga\n        imprimir(\"esta linea si se ejecuta\")\n        i := i + 1\n        continuar\n        imprimir(\"esta linea nunca se ejecuta\")\n    fin\nfin",
          "Peso_clon1": 8,
          "Peso_clon2": 8,
          "Peso_clon3": 8
        },
        {
          "Respuesta": "para dobleFactorial(pNumero)\n    factorial := 1\n    si (pNumero = 0) entonces\n        devolver factorial\n    fin\n    si ((pNumero mod 2) diferente 1) entonces // Es par\n        contador := 2\n        mientras (contador <= pNumero) haga\n            factorial := factorial * contador\n            contador := contador + 2\n        fin\n    fin\n    si ((pNumero mod 2) igual 1) entonces // Es impar\n        contador := 1\n        mientras (contador <= pNumero) haga\n            factorial := factorial * contador\n            contador := contador + 2\n        fin\n    fin\n    devolver factorial\nfin\n\npara dobleFactorial(pNumero)\n    factorial := 1\n    si ((pNumero mod 2) igual 1) entonces // Es impar\n        contador := 1\n        mientras (contador <= pNumero) haga\n            factorial := factorial * contador\n            contador := contador + 2\n        fin\n    fin\n    devolver factorial\nfin\n\npara principal()\n    imprimir(dobleFactorial(9))\n    imprimir(dobleFactorial(8))\n    imprimir(dobleFactorial(0))\nfin",
          "Peso_clon1": 8,
          "Peso_clon2": 8,
          "Peso_clon3": 8
        }
      ],
      "ExeAnswers": []
    },
    {
      "idItem": 42,
      "Conditions": [
        {
          "idCondicion": 1,
          "Nombre": "For",
          "Peso": 8,
          "Cantidad": 3
        }
      ],
      "Solutions": [
        {
          "Respuesta": "para principal ()\n    num := 0\n    repetir (3) veces\n        imprimir(\"valor de num: \" + num)\n        num := num + 1\n    fin\n    \n    //Ciclo anidado\n    iteracion := 0\n    repetir (num + 1) veces\n        imprimir(\"iteracion: \" + iteracion)\n        anidado := 0\n        iteracion := iteracion + 1\n    fin\n    \nfin",
          "Peso_clon1": 8,
          "Peso_clon2": 8,
          "Peso_clon3": 8
        },
        {
          "Respuesta": "para principal ()\n    num := 0\n    repetir (3) veces\n        imprimir(\"valor de num: \" + num)\n        num := num + 1\n    fin\n\n    repetir (3) veces\n        imprimir(\"valor de num: \" + num)\n        num := num + 1\n    fin\n    \n    //Ciclo anidado\n    iteracion := 0\n    repetir (num + 1) veces\n        imprimir(\"iteracion: \" + iteracion)\n        anidado := 0\n        iteracion := iteracion + 1\n    fin\n    \nfin",
          "Peso_clon1": 8,
          "Peso_clon2": 8,
          "Peso_clon3": 8
        },
        {
          "Respuesta": "para principal ()\n    num := 0\n    repetir (3) veces\n        imprimir(\"valor de num: \" + num)\n        num := num + 1\n    fin\n\n    repetir (3) veces\n        imprimir(\"valor de num: \" + num)\n        num := num + 1\n    fin\n    \n    //Ciclo anidado\n    iteracion := 0\n    repetir (num + 1) veces\n        imprimir(\"iteracion: \" + iteracion)\n        anidado := 0\n        repetir (2) veces\n            imprimir(\"iteracion anidada: \" + anidado)\n            anidado := anidado + 1\n        fin\n        iteracion := iteracion + 1\n    fin\n    \nfin",
          "Peso_clon1": 8,
          "Peso_clon2": 8,
          "Peso_clon3": 8
        }
      ],
      "ExeAnswers": []
    },
    {
      "idItem": 43,
      "Conditions": [
        {
          "idCondicion": 1,
          "Nombre": "if",
          "Peso": 2,
          "Cantidad": 2
        }
      ],
      "Solutions": [
        {
          "Respuesta": "para principal ()\n    bandera1 := verdadero\n    bandera2 := falso\n    resultado := bandera1 o bandera2 y verdadero y falso\n    si (resultado) entonces\n        imprimir(\"resultado verdadero\")\n    sino\n        imprimir(\"resultado falso\")\n    fin\nfin",
          "Peso_clon1": 8,
          "Peso_clon2": 8,
          "Peso_clon3": 8
        },
        {
          "Respuesta": "para dobleFactorial(pNumero)\n    factorial := 1\n    si (pNumero = 0) entonces\n        devolver factorial\n    fin\n    si ((pNumero mod 2) diferente 1) entonces // Es par\n        contador := 2\n        mientras (contador <= pNumero) haga\n            factorial := factorial * contador\n            contador := contador + 2\n        fin\n    fin\n    si ((pNumero mod 2) igual 1) entonces // Es impar\n        contador := 1\n        mientras (contador <= pNumero) haga\n            factorial := factorial * contador\n            contador := contador + 2\n        fin\n    fin\n    devolver factorial\nfin\n\npara dobleFactorial(pNumero)\n    factorial := 1\n    si ((pNumero mod 2) igual 1) entonces // Es impar\n        contador := 1\n        mientras (contador <= pNumero) haga\n            factorial := factorial * contador\n            contador := contador + 2\n        fin\n    fin\n    devolver factorial\nfin\n\npara principal()\n    imprimir(dobleFactorial(9))\n    imprimir(dobleFactorial(8))\n    imprimir(dobleFactorial(0))\nfin",
          "Peso_clon1": 8,
          "Peso_clon2": 8,
          "Peso_clon3": 8
        }
      ],
      "ExeAnswers": []
    }
  ]
}